=========
 pytypes 
=========


Welcome to the pytypes project
==============================

pytypes is a typing toolbox w.r.t. PEP 484 (python.org/dev/peps/pep-0484/)
(PEP 526 (python.org/dev/peps/pep-0526/) on the road map, later also 544
(python.org/dev/peps/pep-0544/) if it gets accepted).

It's main features are currently

* @typechecked decorator for runtime typechecking with support for stubfiles
  (python.org/dev/peps/pep-0484/#stub-files) and type comments
  (python.org/dev/peps/pep-0484/#suggested-syntax-for-python-2-7-and-straddling-code)
* @override decorator that asserts existence of a type-compatible parent method
* @annotations decorator to turn type info from stubfiles or from type comments
  into __annotations__
* @typelogged decorator observes function and method calls at runtime and
  generates stubfiles from acquired type info
* service functions to apply these decorators module wide or even globally,
  i.e. runtime wide
* typechecking can alternatively be done in decorator-free manner
  (friendlier for debuggers)
* all the above decorators work smoothly with OOP, i.e. with methods,
  static methods, class methods and properties, even if classes are nested
* converter for stubfiles to Python 2.7 compliant form
* lots of utility functions regarding types, e.g. a Python 2.7 compliant and
  actually functional implementation of get_type_hints
* full Python 2.7 support for all these features

An additional future goal will be integration with the Java typing system when
running on Jython. Along with this, some generator utilities to produce
type-safe Java bindings for Python frameworks are planned.
In wider sense, PEP 484-style type annotations can be used to build type safe
interfaces to allow also other programming languages to call into Python code
(kind of reverse FFI).
In this sense the project name refers to 'ctypes', which provides Python-bindings of C.



Python 2.7, 3.5, 3.6
--------------------

All described features of pytypes were carefully implemented such that they are
equally workable on CPython 3.5, 3.6, 2.7 and on Jython 2.7.1
(other interpreters might work as well, but were not yet tested).
For Python 2.7, pytypes fully supports type-annotations via type comments
(python.org/dev/peps/pep-0484/#suggested-syntax-for-python-2-7-and-straddling-code).
It also supports Python 2.7-style type annotations in Python 3.5-code to allow
easier 2.7/3.5 multi-version development.



Why write another runtime typecheck decorator?
----------------------------------------------

There have been earlier approaches for runtime-typechecking. However, most of
them predate PEP 484 or lack some crucial features like support of Python 2.7
or support of stubfiles. Also, none of them features a typechecking override
decorator. There were separate approaches for override decorators, but these
usually don't consider PEP 484 at all.
So we decided that it's time for a new runtime typechecking framework, designed
to support PEP 484 from the roots, including its extensive features like
(Python 2.7-style-)type comments and stub files.


Quick manual
============

See README.md.


Next steps
==========

- support PEP 526 (python.org/dev/peps/pep-0526)
- support overloading
  (python.org/dev/peps/pep-0484/#function-method-overloading)
- support named tuple
- support async-related constructs from typing
- support notation for Positional-only arguments
  (python.org/dev/peps/pep-0484/#positional-only-arguments)
- runtime independent parser for stubfiles


License
=======

pytypes is released under Apache 2.0 license.
A copy is provided in the file LICENSE.


Copyright 2017 Stefan Richthofer

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Contact
=======

stefan.richthofer@jyni.org

